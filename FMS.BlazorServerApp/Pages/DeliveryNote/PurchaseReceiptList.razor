@page "/ostutarned"
@inject NavigationManager NavManager
@inject IServiceProvider ServiceProvider

@if (pagedReceipts?.List == null || dropdowns == null)
{
    <p class="m-2">Loading...</p>
}
else
{
    <div class="main">
        <div class="container">

            <div class="d-flex my-3 p-2 justify-content-between" style="background-color: lightslategray">
                <h4 class="text-white p-0 m-0 align-self-center">Ostutarned</h4>
                <div class="form-inline">
                    <select class="form-control" value="@Options.ToLocationId" @onchange="OnLocationChanged">
                        <option selected value="0">-- Kõik laod --</option>
                        @foreach (var location in dropdowns.ToLocations)
                        {
                            <option value="@location.Value" selected="@(location.Value == Options.ToLocationId)">@location.Key</option>
                        }
                    </select>

                    <select class="form-control ml-2" @onchange="StatusSelectionChanged">
                        <option value="null" selected="@(Options.IsClosed == null)">--- Kõik olekud ---</option>
                        <option value="false" selected="@(Options.IsClosed == false)">Avatud</option>
                        <option value="true" selected="@(Options.IsClosed == true)">Suletud</option>
                    </select>
                </div>
            </div>

            <table class="table table-hover">
                <thead class="thead-light">
                    <tr>
                        <th>Nr.</th>
                        <th>Saaja ladu</th>
                        <th>Saatja</th>
                        <th>Kuupäev</th>
                        <th>Olek</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var receipt in pagedReceipts.List)
                    {
                        <tr class="@(receipt == selectedItem ? "bg-primary text-white" : "")" @onclick="@(() => selectedItem = receipt)"
                            @ondblclick="@(() => NavManager.NavigateTo($"/ostutarne/{receipt.DeliveryNoteId}"))"
                            style="cursor: default;">
                            <td style="width: 15%">@receipt.DeliveryNo</td>
                            <td style="width: 30%">@receipt.ToLocationName</td>
                            <td style="width: 30%">@receipt.FromLocationName</td>
                            <td style="width: 15%">@receipt.DeliveryDate.ToShortDateString()</td>
                            <td style="width: 10%">@receipt.StatusName</td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="row">
                <div class="col">
                    @*<NavLink class="btn btn-primary" href="/ostutarne/uus">Uus ostutarne</NavLink>*@
                </div>
                <div class="col-auto">
                    <Pager Result="pagedReceipts" PageChanged="PagerPageChanged" />
                </div>
                <div class="col text-right">
                    <p class="text-muted">Kirjeid: @pagedReceipts.ItemsCount</p>
                </div>
            </div>

        </div>
    </div>
}


@code {
    private PagedList<ReceiptListItemDto> pagedReceipts;
    private ReceiptListItemDto selectedItem;
    private ReceiptDropdowns dropdowns;

    public ReceiptListOptions Options { get; set; } = new ReceiptListOptions { PageSize = 13 };

    protected override async Task OnInitializedAsync()
    {
        dropdowns = await ServiceProvider.GetService<IReceiptDropdownsService>().GetPurchaseReceiptDropdowns();
        UpdateList();
    }

    private void UpdateList(int currentPage = 1)
    {
        Options.CurrentPage = currentPage;
        pagedReceipts = ServiceProvider.GetService<IPurchaseReceiptService>().FilterPage(Options);
    }

    private void PagerPageChanged(int currentPage)
    {
        UpdateList(currentPage);
        StateHasChanged();
    }

    private void OnLocationChanged(ChangeEventArgs e)
    {
        Options.ToLocationId = int.Parse(e.Value.ToString());
        UpdateList();
    }

    private void StatusSelectionChanged(ChangeEventArgs e)
    {
        Options.IsClosed = (bool.TryParse(e.Value.ToString(), out bool tmp) ? tmp : null);
        UpdateList();
    }
}
