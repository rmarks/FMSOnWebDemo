@if (PagedReceipts?.List == null || Dropdowns == null)
{
    <p class="m-2">Loading...</p>
}
else
{
    <div class="container">

        <div class="d-flex my-3 p-2 justify-content-between" style="background-color: lightslategray">
            <h4 class="text-white p-0 m-0 align-self-center">@Title</h4>
            <div class="form-inline">
                <select class="form-control" value="@Options.ToLocationId" @onchange="OnToLocationChanged">
                    <option selected value="0">-- Kõik laod --</option>
                    @foreach (var location in Dropdowns.ToLocations)
                    {
                        <option value="@location.Value" selected="@(location.Value == Options.ToLocationId)">@location.Key</option>
                    }
                </select>

                <select class="form-control ml-2" value="@Options.FromLocationId" @onchange="OnFromLocationChanged">
                    <option selected value="0">-- Kõik saatjad --</option>
                    @foreach (var location in Dropdowns.FromLocations)
                    {
                        <option value="@location.Value" selected="@(location.Value == Options.FromLocationId)">@location.Key</option>
                    }
                </select>

                <select class="form-control ml-2" @onchange="OnStatusSelectionChanged">
                    <option value="null" selected="@(Options.IsClosed == null)">--- Kõik olekud ---</option>
                    <option value="false" selected="@(Options.IsClosed == false)">Avatud</option>
                    <option value="true" selected="@(Options.IsClosed == true)">Suletud</option>
                </select>
            </div>
        </div>

        <table class="table table-hover">
            <thead class="thead-light">
                <tr>
                    <th>Nr.</th>
                    <th>Saaja ladu</th>
                    <th>Saatja</th>
                    <th>Kuupäev</th>
                    <th>Olek</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var receipt in PagedReceipts.List)
                {
                    <tr class="@(receipt == selectedItem ? "bg-primary text-white" : "")" @onclick="@(() => selectedItem = receipt)"
                        style="cursor: default;">
                        <td style="width: 15%">@receipt.DeliveryNo</td>
                        <td style="width: 30%">@receipt.ToLocationName</td>
                        <td style="width: 30%">@receipt.FromLocationName</td>
                        <td style="width: 15%">@receipt.DeliveryDate.ToShortDateString()</td>
                        <td style="width: 10%">@receipt.StatusName</td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="row">
            <div class="col">
                @*<NavLink class="btn btn-primary" href="/ostutarne/uus">Uus ostutarne</NavLink>*@
            </div>
            <div class="col-auto">
                <Pager Result="PagedReceipts" PageChanged="OnPagerPageChanged" />
            </div>
            <div class="col text-right">
                <p class="text-muted">Kirjeid: @PagedReceipts.ItemsCount</p>
            </div>
        </div>

    </div>
}

@code {
    //private PagedList<ReceiptListItemDto> pagedReceipts;
    //private ReceiptDropdowns dropdowns;
    private ReceiptListItemDto selectedItem;

    [Parameter] public string Title { get; set; }
    [Parameter] public ReceiptDropdowns Dropdowns { get; set; }
    [Parameter] public PagedList<ReceiptListItemDto> PagedReceipts { get; set; }
    [Parameter] public EventCallback<ReceiptListOptions> OptionsChanged { get; set; }
    [Parameter] public ReceiptListOptions Options { get; set; }

    //public ReceiptListOptions Options { get; set; } = new ReceiptListOptions { PageSize = 13 };

    //protected override void OnParametersSet()
    //{
    //    RaiseOptionsChanged();
    //}

    #region helpers
    private void RaiseOptionsChanged(int currentPage = 1)
    {
        Options.CurrentPage = currentPage;
        OptionsChanged.InvokeAsync(Options);
    }
    #endregion

    #region event handlers
    private void OnPagerPageChanged(int currentPage)
    {
        RaiseOptionsChanged(currentPage);
        StateHasChanged();
    }

    private void OnStatusSelectionChanged(ChangeEventArgs e)
    {
        Options.IsClosed = (bool.TryParse(e.Value.ToString(), out bool tmp) ? tmp : null);
        RaiseOptionsChanged();
    }

    private void OnToLocationChanged(ChangeEventArgs e)
    {
        Options.ToLocationId = int.Parse(e.Value.ToString());
        RaiseOptionsChanged();
    }

    private void OnFromLocationChanged(ChangeEventArgs e)
    {
        Options.FromLocationId = int.Parse(e.Value.ToString());
        RaiseOptionsChanged();
    }
    #endregion
}
