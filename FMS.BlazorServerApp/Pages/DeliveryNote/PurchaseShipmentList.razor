@page "/ostulahetused"
@inject IServiceProvider ServiceProvider
@inject NavigationManager NavManager
@implements IDisposable

<div class="main">
    @if (pagedItems?.List == null || dropdowns == null)
    {
        <p class="m-2">Loading...</p>
    }
    else
    {
        <div class="container">

            <DeliveryListHeaderComponent Title="@title">
                <SelectControl class="form-control" Title="Kõik saatjad" Values="@dropdowns.FromLocations"
                               @bind-Value="@options.FromLocationId" OnChangeCallback="@(() => HandleOptionsChanged())" />

                <DocumentStatusSelectControl class="form-control ml-2" @bind-Value="@options.IsClosed"
                                             OnChangeCallback="@(() => HandleOptionsChanged())" />
            </DeliveryListHeaderComponent>


            <PagedTableControl PagedItems="@pagedItems" TItem="DeliveryListItemDto" Context="shipment"
                               ItemDblclicked="@((item) => HandleItemSelected(item))"
                               PageChanged="@((cp) => HandleOptionsChanged(cp))">
                <TableHeader>
                    <th>Nr.</th>
                    <th>Saatja</th>
                    <th>Saaja</th>
                    <th>Kuupäev</th>
                    <th>Olek</th>
                </TableHeader>
                <RowTemplate>
                    <td style="width: 15%">@shipment.DeliveryNo</td>
                    <td style="width: 30%">@shipment.FromLocationName</td>
                    <td style="width: 30%">@shipment.ToLocationName</td>
                    <td style="width: 15%">@shipment.DeliveryDate.ToShortDateString()</td>
                    <td style="width: 10%">@shipment.StatusName</td>
                </RowTemplate>
            </PagedTableControl>

        </div>
    }
</div>


@code {
    private PagedList<DeliveryListItemDto> pagedItems;
    private DeliveryDropdowns dropdowns;
    private DeliveryListOptions options = new DeliveryListOptions { PageSize = 13 };
    private string title = "Ostulähetused";

    protected override async Task OnInitializedAsync()
    {
        dropdowns = await ServiceProvider.GetService<IDeliveryDropdownsService>().GetOneSideShipmentDropdowns();
        UpdateList();

        NavManager.LocationChanged += HandleLocationChanged;
    }

    private void UpdateList()
    {
        NavManager.SetParametersFromQueryString(options);
        pagedItems = ServiceProvider.GetService<IPurchaseDeliveryService>().ShipmentFilterPage(options);
    }

    void HandleOptionsChanged(int currentPage = 1)
    {
        options.CurrentPage = currentPage;

        string relativeUri = NavManager.GetPathAndQueryStringFromParameters(options);
        NavManager.NavigateTo(relativeUri);
    }

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        UpdateList();
        StateHasChanged();
    }

    private void HandleItemSelected(DeliveryListItemDto item)
    {
        NavManager.NavigateTo($"ostulahetus/{item.DeliveryNoteId}?returnUrl={NavManager.ToBaseRelativePath(NavManager.Uri)}");
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }
}
