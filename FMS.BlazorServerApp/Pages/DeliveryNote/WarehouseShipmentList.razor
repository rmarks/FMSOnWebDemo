@page "/laosaatelehed"
@inject IServiceProvider ServiceProvider
@inject NavigationManager NavManager

<div class="sidebar p-4">
    <h3 class="text-center text-white">@title</h3>

    <DeliveryShipmentListFilter Dropdowns="@dropdowns" Options="@options" OptionsChanged="@(() => HandleOptionsChanged())" />
</div>

<div class="main p-3">
    @if (pagedShipments?.List == null)
    {
        <p class="text-secondary">Loading...</p>
    }
    else
    {
        <PagedTableControl PagedItems="@pagedShipments" TItem="LocationDeliveryListItemDto" Context="shipment"
                           ItemDblclicked="@((item) => HandleItemSelected(item))"
                           PageChanged="@((cp) => HandleOptionsChanged(cp))">
            <TableHeader>
                <th>Nr.</th>
                <th>Saatja</th>
                <th>Saaja</th>
                <th>Kuupäev</th>
                <th>Olek</th>
            </TableHeader>
            <RowTemplate>
                <td style="width: 15%">@shipment.DocumentNo</td>
                <td style="width: 30%">@shipment.FromLocationName</td>
                <td style="width: 30%">@shipment.ToLocationName</td>
                <td style="width: 15%">@shipment.DocumentDate.ToShortDateString()</td>
                <td style="width: 10%">@shipment.StatusName</td>
            </RowTemplate>
        </PagedTableControl>
    }
</div>

<div class="sidebar"></div>

@code {
    DeliveryDropdowns dropdowns;
    PagedList<LocationDeliveryListItemDto> pagedShipments;
    DeliveryListOptions options = new DeliveryListOptions { CurrentPage = 1, PageSize = 14, IsClosed = false };
    string title = "Saatelehed";

    protected override async Task OnInitializedAsync()
    {
        dropdowns = await ServiceProvider.GetService<IDeliveryDropdownsService>().GetWarehouseShipmentDropdowns();
        UpdateList();

        NavManager.LocationChanged += HandleLocationChanged;
    }

    void UpdateList()
    {
        NavManager.SetParametersFromQueryString(options);
        pagedShipments = ServiceProvider.GetService<ILocationDeliveryService>().ShipmentFilterPage(options);
    }

    void HandleOptionsChanged(int currentPage = 1)
    {
        options.CurrentPage = currentPage;

        string relativeUri = NavManager.GetPathAndQueryStringFromParameters(options);
        NavManager.NavigateTo(relativeUri);
    }

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        UpdateList();
        StateHasChanged();
    }

    void HandleItemSelected(LocationDeliveryListItemDto item)
    {
        NavManager.NavigateTo($"saateleht/{item.DocumentId}?returnUrl={NavManager.ToBaseRelativePath(NavManager.Uri)}");
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }
}
