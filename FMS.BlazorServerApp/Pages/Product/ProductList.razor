@page "/tooted"
@page "/tooted/return"
@inject IServiceProvider ServiceProvider
@inject NavigationManager NavManager
@inject AppState AppState

<div class="sidebar py-2 px-4">
    <h3 class="text-center text-white">Tooted</h3>

    <h6 class="text-white mt-4">Ava toode</h6>
    <div class="form-group">
        <input class="form-control" placeholder="Sisesta toote kood" disabled />
    </div>

    <h6 class="text-white mt-4">Laoseis</h6>
    <ProductListInventoryComponent Options="@Options" Dropdowns="@Dropdowns" OptionsChanged="OnOptionsChanged" />

    <h6 class="text-white mt-4">Loendi filter</h6>
    <ProductListFilterComponent Options="@Options" Dropdowns="@Dropdowns" OptionsChanged="OnOptionsChanged" />
</div>

<div class="main">
    @if (pagedProductBases?.List == null)
    {
        <p class="text-secondary m-2">Loading...</p>
    }
    else
    {
        <ul class="product-cards">
            @foreach (var pb in pagedProductBases.List)
            {
            <li style="background-image: url('/img/products/small/@(pb.ProductBaseCode).jpg')">
                <div class="product-info" @onclick="@(() => NavManager.NavigateTo(GetProductLink(pb.ProductBaseId)))">
                    @pb.ProductBaseName
                    @*<span class="content">@pb.Name</span>*@
                    <span class="code">@pb.ProductBaseCode</span>
                    @*<span class="stock" @onclick="@(() => NavManager.NavigateTo("/tooted/uus"))">Laos</span>*@
                </div>
                <span class="stock" @onclick="@(() => AddProductInfo(pb))"
                      style="background-color: @(pb.FreeQuantity > 0 ? "mediumseagreen" : (pb.ReservedQuantity > 0 ? "orange" : "firebrick"));">
                    Laos: @(pb.FreeQuantity)
                </span>
            </li>
            }
        </ul>

        <div class="row mx-5">
            <div class="col">
                <NavLink class="btn btn-primary" href="/tooted/uus">Lisa uus toode</NavLink>
            </div>
            <div class="col-auto">
                <Pager Result="pagedProductBases" PageChanged="PagerPageChanged" />
            </div>
            <div class="col text-right">
                <p class="text-muted">Tooteid: @pagedProductBases.ItemsCount</p>
            </div>
        </div>
    }
</div>

<div class="sidebar py-2 px-3">

    <button type="button" class="btn btn-primary mb-2" @onclick="@(() => ProductInfoList.Clear())"
            hidden="@(ProductInfoList.Count < 2)">
        Eemalda kõik (@(ProductInfoList.Count))
    </button>

    @if (ProductInfoList.Count == 0)
    {
        <h3 class="text-center text-secondary mt-auto">Toote info</h3>
        <p class="text-center text-secondary mb-auto">Toote info vaatamiseks kliki toote pildil laoseisu märgisele</p>
    }
    else
    {
        @foreach (var info in ProductInfoList)
        {
            <ProductInfoComponent ProductBaseInfo="@info" ProductBaseInfoRemoved="OnProductInfoRemoved" />
        }
    }

</div>


@code {
    PagedList<ProductBaseListDto> pagedProductBases;

    public ProductListOptions Options { get; set; } = new ProductListOptions { PageSize = 20, CurrentPage = 1, Stock = Stock.AllInStock };

    public ProductDropdowns Dropdowns { get; set; }

    public IList<ProductBaseInfoDto> ProductInfoList { get; set; } = new List<ProductBaseInfoDto>();

    protected override async Task OnInitializedAsync()
    {
        Dropdowns = await ServiceProvider.GetService<IProductDropdownsService>().GetProductDropdowns();
    }

    protected override void OnParametersSet()
    {
        if (NavManager.Uri.Contains("return"))
        {
            Options = AppState.ProductListOptions ?? Options;
        }
        else
        {
            AppState.ProductListOptions = null;
        }

        UpdateList();
    }

    #region helpers
    void UpdateList()
    {
        pagedProductBases = ServiceProvider.GetService<IProductBaseService>().GetFilterPage(Options);
    }

    string GetProductLink(int id)
    {
        AppState.ProductListOptions = Options;
        return $"/tooted/{id}";
    }

    void AddProductInfo(ProductBaseListDto listDto)
    {
        var infoDto = ProductInfoList.FirstOrDefault(p => p.ProductBaseCode == listDto.ProductBaseCode);
        if (infoDto != null)
        {
            ProductInfoList.Remove(infoDto);
        }

        infoDto = new ProductBaseInfoDto
        {
            ProductBaseId = listDto.ProductBaseId,
            ProductBaseCode = listDto.ProductBaseCode,
        };

        infoDto = ServiceProvider.GetService<IProductBaseService>().GetProductBaseInfo(infoDto);

        ProductInfoList.Insert(0, infoDto);
    }
    #endregion

    #region event handlers
    void PagerPageChanged(int currentPage)
    {
        Options.CurrentPage = currentPage;
        UpdateList();
        StateHasChanged();
    }

    void OnOptionsChanged()
    {
        Options.CurrentPage = 1;
        UpdateList();
    }

    void OnProductInfoRemoved(ProductBaseInfoDto info)
    {
        ProductInfoList.Remove(info);
    }
    #endregion
}
