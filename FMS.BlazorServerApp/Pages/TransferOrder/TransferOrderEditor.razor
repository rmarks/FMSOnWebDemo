@page "/laotellimus/{id:int}"
@page "/laotellimus/uus" 
@inject NavigationManager NavManager
@inject AppState AppState
@inject IServiceProvider ServiceProvider

<div class="d-flex flex-column vw-100 px-3 bg-light">
    <nav class="navbar navbar-light border-bottom">
        <span class="navbar-brand font-weight-bold">Laotellimus</span>

        <div class="d-flex ml-auto">
            <button type="button" class="btn btn-danger" @onclick="@(() => deleteDialog.Show())" disabled="@DeleteDisabled">Kustuta</button>
            <button type="button" class="btn btn-primary ml-2" @onclick="HandleReturnToList">Tagasi</button>
        </div>
    </nav>

    <div class="bg-white my-3 mx-0 px-3 p-3 shadow">
        @if (editableOrderHeader == null || dropdowns == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <EditForm Model="@editableOrderHeader" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col-1">
                        <div class="form-group">
                            <label class="text-secondary mb-1">Nr.</label>
                            <InputText class="form-control" @bind-Value="@editableOrderHeader.OrderNo" disabled="@(!isEditMode)" />
                            <ValidationMessage For="@(() => editableOrderHeader.OrderNo)" />
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="form-group">
                            <label class="text-secondary mb-1">Kuupäev</label>
                            <InputDate class="form-control" @bind-Value="@editableOrderHeader.OrderDate" disabled="@(!isEditMode)" />
                            <ValidationMessage For="@(() => editableOrderHeader.OrderDate)" />
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="form-group">
                            <label class="text-secondary mb-1">Tarneaeg</label>
                            <InputDate class="form-control" @bind-Value="@editableOrderHeader.OrderDeliveryDate" disabled="@(!isEditMode)" />
                            <ValidationMessage For="@(() => editableOrderHeader.OrderDeliveryDate)" />
                        </div>
                    </div>
                    <div class="col-2">
                        <label class="text-secondary mb-1">Komisjoniladu</label>
                        <InputSelect class="form-control" TValue="int" @bind-Value="editableOrderHeader.LocationId" disabled="@(!isEditMode)">
                            @foreach (var loc in dropdowns.CommissionLocations)
                            {
                                <option value="@loc.Value">@loc.Key</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => editableOrderHeader.LocationId)" />
                    </div>
                </div>
                <div class="d-flex border-top pt-2">
                    <button type="button" class="btn btn-primary ml-auto" hidden="@isEditMode"
                            @onclick="@(() => isEditMode = !isEditMode)">
                        Muuda
                    </button>
                    <button type="button" class="btn btn-secondary mr-auto" hidden="@(!isEditMode)"
                            @onclick="@HandleCancel">
                        Katkesta
                    </button>
                    <button type="submit" class="btn btn-primary ml-auto" hidden="@(!isEditMode)">
                        Salvesta
                    </button>
                </div>
            </EditForm>
        }
    </div>

    <div class="row bg-white mx-0 px-3 p-3 shadow">
        @if (dropdowns == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="col-2">
                <SelectControlFormGroup Label="Valmiskaubaladu" Values="@dropdowns.WarehouseLocations"
                                        Value="warehouseLocationId" disabled="@(isEditMode)" />
            </div>
        }
    </div>

    <div class="bg-white my-3 mx-0 px-3 p-3 shadow">
        @if (orderLines == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <ScrollableTableControl TItem="TransferOrderLineDto" Items="@orderLines" Context="item" CSSClass="flex-grow-1">
                <TableHeader>
                    <th>Ladu</th>
                    <th>Kood</th>
                    <th>Nimetus</th>
                    <th class="text-right">Tellitud</th>
                    <th class="text-right">Tarnitud</th>
                    <th class="text-right">Reserv.</th>
                    <th class="text-right">Puudu</th>
                </TableHeader>
                <RowTemplate>
                    <td>@item.LocationName</td>
                    <td>@item.ProductCode</td>
                    <td>@item.ProductName</td>
                    <td class="text-right">@item.OrderedQuantity</td>
                    <td class="text-right">@item.InvoicedQuantity</td>
                    <td class="text-right text-primary">@item.ReservedQuantity</td>
                    <td class="text-right">@item.MissingQuantity</td>
                </RowTemplate>
                <TableFooter>
                    <th colspan="3" class="text-right">Kogused kokku:</th>
                    <th class="text-right">@totalOrderedQuantity</th>
                    <th class="text-right">@totalInvoicedQuantity</th>
                    <th class="text-right text-primary">@totalReservedQuantity</th>
                    <th class="text-right">@totalMissingQuantity</th>
                </TableFooter>
            </ScrollableTableControl>
        }
    </div>

    <ConfirmDialog @ref="@deleteDialog" Title="@("Kustutamine")" OnConfirm="HandleDelete">
        Kas kustutame tellimuse?
    </ConfirmDialog>
</div>

    @code {
        #region fields
        private TransferOrderHeaderDto orderHeader;
        private TransferOrderHeaderDto editableOrderHeader;
        private IList<TransferOrderLineDto> orderLines;
        //private TransferOrderDto order = new TransferOrderDto();
        private TransferOrderDropdowns dropdowns;
        private int warehouseLocationId;
        private bool isEditMode;
        private ConfirmDialog deleteDialog;
        #endregion

        #region total fields
        int totalOrderedQuantity;
        int totalInvoicedQuantity;
        int totalReservedQuantity;
        int totalMissingQuantity;
        #endregion

        [Parameter]
        public int Id { get; set; }

        private bool DeleteDisabled => editableOrderHeader == null ? true : editableOrderHeader.Id == 0;

        protected override async Task OnInitializedAsync()
        {
            if (Id == 0)
            {
                orderHeader = new TransferOrderHeaderDto { OrderDate = DateTime.Now };
                orderLines = new List<TransferOrderLineDto>();
                isEditMode = true;
            }
            else
            {
                orderHeader = await ServiceProvider.GetService<ITransferOrderService>().ReadOrderHeaderAsync(Id);
                orderLines = await ServiceProvider.GetService<ITransferOrderService>().GetOrderLinesAsync(Id);
                SetTotals();
            }

            editableOrderHeader = TransferOrderHeaderDto.CreateFrom(orderHeader);
            //order = await ServiceProvider.GetService<ITransferOrderService>().GetOrder(Id);
            dropdowns = await ServiceProvider.GetService<ITransferOrderDropdownsService>().GetCommissionTransferOrderDropdowns();
        }

        #region helpers
        private void SetTotals()
        {
            totalOrderedQuantity = orderLines.Sum(l => l.OrderedQuantity);
            totalInvoicedQuantity = orderLines.Sum(l => l.InvoicedQuantity);
            totalReservedQuantity = orderLines.Sum(l => l.ReservedQuantity);
            totalMissingQuantity = totalOrderedQuantity - totalInvoicedQuantity - totalReservedQuantity;
        }
        #endregion

        #region event handlers
        private void HandleReturnToList()
        {
            AppState.TransferOrderOptions.IsReturnToList = true;

            NavManager.NavigateTo("laotellimused");
        }

        private void HandleCancel()
        {
            if (editableOrderHeader.Id == 0)
            {
                HandleReturnToList();
            }
            else
            {
                editableOrderHeader = TransferOrderHeaderDto.CreateFrom(orderHeader);
                isEditMode = !isEditMode;
            }
        }

        private async Task HandleValidSubmit()
        {
            if (editableOrderHeader.Id == 0)
            {
                editableOrderHeader = await ServiceProvider.GetService<ITransferOrderService>().CreateOrderHeaderAsync(editableOrderHeader);
            }
            else
            {
                await ServiceProvider.GetService<ITransferOrderService>().UpdateOrderHeaderAsync(editableOrderHeader);
            }

            orderHeader = TransferOrderHeaderDto.CreateFrom(editableOrderHeader);
            isEditMode = !isEditMode;
        }

        private async Task HandleDelete()
        {
            bool isDeleted = await ServiceProvider.GetService<ITransferOrderService>().DeleteOrderAsync(editableOrderHeader.Id);
            if (isDeleted)
            {
                HandleReturnToList();
            }
        }
        #endregion
    }
