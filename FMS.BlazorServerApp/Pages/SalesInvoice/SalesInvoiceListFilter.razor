@inject IServiceProvider ServiceProvider

<div>
    @if (Options == null)
    {
        <p class="text-secondary">Loading...</p>
    }
    else
    {
        <div class="form-group">
            <h6 class="text-white mt-4">Klient</h6>
            <div class="input-group">
                <input class="form-control" type="search" placeholder="Kliendi nimi" @bind="Options.CustomerNameSearchString" @onkeyup="SearchKeyPress" />
                <div class="input-group-btn">
                    <button class="btn btn-dark" @onclick="SearchClick">
                        <i class="oi oi-magnifying-glass" title="search" />
                    </button>
                </div>
            </div>
        </div>

        <div class="form-group mt-4">
            <h6 class="text-white">Saaja</h6>
            <div class="input-group">
                <input class="form-control" type="search" placeholder="Saaja nimi" @bind="Options.ConsigneeNameSearchString" @onkeyup="SearchKeyPress" />
                <div class="input-group-btn">
                    <button class="btn btn-dark" @onclick="SearchClick">
                        <i class="oi oi-magnifying-glass" title="search" />
                    </button>
                </div>
            </div>
        </div>

        <div class="form-group mt-4">
            <h6 class="text-white">Olek</h6>
            <DocumentStatusSelectControl class="form-control" @bind-Value="@Options.IsClosed"
                                         OnChangeCallback="@(() => HandleOptionsChanged())" />
        </div>
    }
</div>

@code {
    [Parameter] public SalesInvoiceListOptions Options { get; set; }

    [Parameter] public EventCallback OptionsChanged { get; set; }

    #region event handler
    private void SearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchClick();
        }
    }

    private void SearchClick()
    {
        HandleOptionsChanged();
    }

    void HandleOptionsChanged()
    {
        OptionsChanged.InvokeAsync();
    }
    #endregion
}
