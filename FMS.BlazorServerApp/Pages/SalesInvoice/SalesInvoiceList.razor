@page "/arved"
@page "/kreeditarved"
@inject IServiceProvider ServiceProvider
@inject NavigationManager NavManager
@implements IDisposable 

<div class="sidebar p-4">
    <h3 class="text-center text-white">@title</h3>

    <SalesInvoiceListFilter Options="@Options" OnOptionsChanged="@(() => HandleOptionsChanged())" />
</div>

<div class="main p-3">
    @if (pagedInvoices?.List == null)
    {
        <p class="text-secondary">Loading...</p>
    }
    else
    {
        <PagedTableControl PagedItems="@pagedInvoices" TItem="SalesInvoiceListItemDto" Context="invoice"
                           ItemDblclicked="@((item) => HandleItemSelected(item))"
                           PageChanged="@((cp) => HandleOptionsChanged(cp))">
            <TableHeader>
                <th>Nr.</th>
                <th>Klient</th>
                <th>Saaja</th>
                <th>Kuupäev</th>
                <th>Olek</th>
            </TableHeader>
            <RowTemplate>
                <td style="width: 15%">@invoice.InvoiceNo</td>
                <td style="width: 30%">@invoice.CustomerName</td>
                <td style="width: 30%">@invoice.ConsigneeName</td>
                <td style="width: 15%">@invoice.InvoiceDate.ToShortDateString()</td>
                <td style="width: 10%">@invoice.StatusName</td>
            </RowTemplate>
        </PagedTableControl>
    }
</div>


@code {
    private PagedList<SalesInvoiceListItemDto> pagedInvoices;
    string title = string.Empty;

    public SalesInvoiceListOptions Options { get; set; } = new SalesInvoiceListOptions { PageSize = 14, CurrentPage = 1, IsClosed = false };

    protected override void OnInitialized()
    {
        SetDocumentTypeCodeAndTitle();

        UpdateList();

        NavManager.LocationChanged += HandleLocationChanged;
    }

    #region helpers
    private void UpdateList()
    {
        NavManager.SetParametersFromQueryString(Options);
        pagedInvoices = ServiceProvider.GetService<ISalesInvoiceListService>().FilterPage(Options);
    }

    void SetDocumentTypeCodeAndTitle()
    {
        string relativePath = NavManager.ToBaseRelativePath(NavManager.Uri);

        if (relativePath.ToLower().Contains("kreeditarved"))
        {
            Options.DocumentTypeCode =  "MK";
            title = "Kreedit-arved";
        }
        else
        {
            Options.DocumentTypeCode = "MA";
            title = "Müügiarved";
        }
    }
    #endregion

    #region event handlers
    void HandleOptionsChanged(int currentPage = 1)
    {
        Options.CurrentPage = currentPage;

        string relativeUri = NavManager.GetPathAndQueryStringFromParameters(Options);
        NavManager.NavigateTo(relativeUri);
    }

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        UpdateList();
        StateHasChanged();
    }

    void HandleItemSelected(SalesInvoiceListItemDto item)
    {
        NavManager.NavigateTo($"/arve/{item.InvoiceId}?returnUrl={NavManager.ToBaseRelativePath(NavManager.Uri)}");
    }
    #endregion

    #region IDisposable
    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }
    #endregion
}
