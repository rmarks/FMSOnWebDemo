@page "/tellimused"
@inject IServiceProvider ServiceProvider
@inject NavigationManager NavManager
@implements IDisposable

<div class="sidebar p-4">
    <h3 class="text-center text-white">Müügitellimused</h3>

    <SalesOrderListFilter Options="options" OnOptionsChanged="@(() => HandleOptionsChanged())" />
</div>

<div class="main p-3">
    @if (pagedOrders?.List == null)
    {
        <p class="text-secondary">Loading...</p>
    }
    else
    {
        <PagedTableControl PagedItems="@pagedOrders" TItem="SalesOrderListItemDto" Context="order"
                           ItemDblclicked="@((item) => HandleItemSelected(item))"
                           PageChanged="@((cp) => HandleOptionsChanged(cp))">
            <TableHeader>
                <th>Nr.</th>
                <th>Klient</th>
                <th>Saaja</th>
                <th>Kuupäev</th>
                <th>Tarneaeg</th>
                <th>Olek</th>
            </TableHeader>
            <RowTemplate>
                <td style="width: 10%">@order.OrderNo</td>
                <td style="width: 30%">@order.CustomerName</td>
                <td style="width: 30%">@order.ConsigneeName</td>
                <td style="width: 10%">@order.OrderDate.ToShortDateString()</td>
                <td style="width: 10%">@(order.DeliveryDate?.ToShortDateString() ?? String.Empty)</td>
                <td style="width: 10%">@order.StatusName</td>
            </RowTemplate>
        </PagedTableControl>
    }
</div>

@code {
    PagedList<SalesOrderListItemDto> pagedOrders;
    SalesOrderListOptions options = new SalesOrderListOptions { PageSize = 14, CurrentPage = 1, IsClosed = false };

    protected override void OnInitialized()
    {
        UpdateList();

        NavManager.LocationChanged += HandleLocationChanged;
    }

    #region helpers
    private void UpdateList()
    {
        NavManager.SetParametersFromQueryString(options);
        pagedOrders = ServiceProvider.GetService<ISalesOrderListService>().FilterPage(options);
    }
    #endregion

    #region event handlers
    void HandleOptionsChanged(int currentPage = 1)
    {
        options.CurrentPage = currentPage;

        string relativeUri = NavManager.GetPathAndQueryStringFromParameters(options);
        NavManager.NavigateTo(relativeUri);
    }

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        UpdateList();
        StateHasChanged();
    }

    void HandleItemSelected(SalesOrderListItemDto item)
    {
        NavManager.NavigateTo($"/tellimus/{item.OrderId}?returnUrl={NavManager.ToBaseRelativePath(NavManager.Uri)}");
    }
    #endregion

    #region IDisposable
    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }
    #endregion
}
